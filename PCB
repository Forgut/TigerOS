package proces_managment;
import java.util.Random;

public class process_control_block {
private static int nowe_id=0;
private String Name;
private boolean czasu_rzeczywistego;
private int ID, 
			licznik_rozkazow,
			priorytet_bazowy,
			priorytet_dynamiczny,
			licznik_wykonanych_rozkazow;
/*NATALIA*/
public PageTable Page_table;
private int virtualBase;
private int rozmiar_tablicy_stronic, start_kodu_procesu /*w pliku wymiany*/;
/*Koniec*/

private String file_name; //nazwa pliku w ktorym sie znajduje kod procesu
/*ADAM ???*/
private klasa_adama rejestry_procesora;
/*koniec*/
private int R1,R2,R3; //rejsetry dla interpretera w ktorych moze sobie zapamietywac rzeczy
						  //Bartoszek tak powiedzial Mili
private int stan;
public void setName(String a) {
	Name=a;
}
private int setPriorytet_Bazowy(int a) {
	if (a<=0 || a>15) return 1; else { //zwraca 1 w przypadku bledu
		priorytet_bazowy=a;
		priorytet_dynamiczny=a;
		return 0; //zwraca zero jezeli wszystko ok
	}
}
public int INCPriorytet_Dynamiczny() {
	if (priorytet_dynamiczny<15) { priorytet_dynamiczny++; return 0; //mozna zwiekszyc priorytet -zwraca 0
	}
	else {
		return 1; //nie udalo sie zwiekszyc priorytetu - zwraca 1
	}
}
public int INCPriorytet_Dynamiczny(int a) {
	if (priorytet_dynamiczny>0 && priorytet_dynamiczny<7 && !czasu_rzeczywistego) {
		priorytet_dynamiczny++;
		return 0;
	}
	else {
		return 1; //nie udalo sie zwiekszyc priorytetu - zwraca 1
	}
}
public void INCLicznik_wykonanych_rozkazow() {
	licznik_wykonanych_rozkazow++;
}
public int SetLicznik_rozkazow(int a) {
	if (a>=0) {licznik_rozkazow=a;
	return 0;
	}
	else {
		return 1;
	}
}
public int Setrozmiar_tablicy_stronic(int a) {
	if (a>=0) {rozmiar_tablicy_stronic=a;
	return 0;
	}
	else {
		return 1;
	}
}
public int SetStart_kodu_procesu(int a) {
	if (a>=0) {
	start_kodu_procesu=a;
	return 0;
	}
	else {
		return 1;
	}
}
public void SetFile_name(String a) {
	file_name=a;
}
public int SetR1(int a){
	if (a>=0) {R1=a; return 0;}else {return 1;}
}
public int SetR2(int a){
	if (a>=0) {R2=a; return 0;}else {return 1;}
}
public int SetR3(int a){
	if (a>=0) {R3=a; return 0;}else {return 1;}
}
public void Setstan(int a) {//0 -gotowy 1 - oczekujacy 2-zakonczony
	stan=a;
}
private int Losuj_priorytet(boolean rzeczywisty) {//losowanie z innego zakresu dla procesu czasu rzeczywistego
	Random generator=new Random();
	if (rzeczywisty) return generator.nextInt(8)+8;
	else return generator.nextInt(7)+1;
}
public process_control_block(int a) {//osobny konstruktor dla procesu bezczynnosci - powinien byc utworzony jako pierwszy
	setName("Proces Bezczynnosci");
	setPriorytet_Bazowy(0);
	ID=nowe_id;
	nowe_id++;
	licznik_rozkazow=licznik_wykonanych_rozkazow=rozmiar_tablicy_stronic=start_kodu_procesu=R1=R2=R3=0;
	SetFile_name("");
	Setstan(0);	
}
public process_control_block() {	
	ID=nowe_id; 
	nowe_id++;
	licznik_rozkazow=priorytet_bazowy=priorytet_dynamiczny=licznik_wykonanych_rozkazow=0;
}
public process_control_block(String nname) {
	setName(nname);
	ID=nowe_id; 
	nowe_id++;
	licznik_rozkazow=priorytet_bazowy=priorytet_dynamiczny=licznik_wykonanych_rozkazow=0;
}
public process_control_block(boolean czasu_rzeczywistego,String nname,int licznik_rozk,int rozmiar_tab_stronic,int start_kodu_proc,
		String file_nam,int nR1,int nR2,int nR3,int state,int process_size,Memory memory) {
	Name=nname;
	this.czasu_rzeczywistego=czasu_rzeczywistego;
	ID=nowe_id;
	nowe_id++;
	licznik_rozkazow=licznik_rozk;
	setPriorytet_Bazowy(Losuj_priorytet(czasu_rzeczywistego));
	this.Page_table=new PageTable(file_nam,process_size,memory);
	virtualBase=Page_table.getVirtualBase();
	licznik_wykonanych_rozkazow=0;
	Setrozmiar_tablicy_stronic(rozmiar_tab_stronic);
	start_kodu_procesu=start_kodu_proc;
	SetFile_name(file_nam);
	SetR1(nR1);
	SetR2(nR2);
	SetR3(nR3);
	Setstan(state);
}
public int getID() {
	return ID;
}
public String getName() {
	return Name;
}
public boolean Czy_czasu_rzeczywistego() {
	return czasu_rzeczywistego;
}
public int getLicznik_rozkazow() {
	return licznik_rozkazow;
}
public int getPriorytet_bazowy() {
	return priorytet_bazowy;
}
public int getPriorytet_dynamiczny() {
	return priorytet_dynamiczny;
}
public int getLicznik_wykonanych_rozkazow() {
	return licznik_wykonanych_rozkazow;
}
public PageTable getInformacja_o_zarzadzaniu_pamiecia() {
	return Page_table;
}
public int getRozmiar_tablicy_stronic() {
	return rozmiar_tablicy_stronic;
}
public int getStart_kodu_procesu() {
	return start_kodu_procesu;
}
public String getFile_name() {
	return file_name;
}
public int getR1() {
	return R1;
}
public int getR2() {
	return R2;
}
public int getR3() {
	return R3;
}
public int getStan() {
	return stan;
}
public void print() {
	System.out.println("Proces: " + this.Name + " ID: " + this.ID);
	System.out.println("Priorytet: " + this.priorytet_dynamiczny + " Licznik wykonanych: " + this.licznik_rozkazow);
}
}
